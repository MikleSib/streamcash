import asyncio
import logging
from typing import List
from celery import Celery
from sqlalchemy.orm import Session

from app.celery_app import celery_app
from app.core.database import SessionLocal
from app import crud
from app.models.donation import DonationStatus, PaymentMethod, Donation
from app.api.api_v1.endpoints.payments import check_tbank_payment_status
from app.core import deps

logger = logging.getLogger(__name__)

@celery_app.task
def check_pending_payments():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ PENDING –ø–ª–∞—Ç–µ–∂–µ–π
    """
    logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ PENDING –ø–ª–∞—Ç–µ–∂–µ–π (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PENDING –ø–ª–∞—Ç–µ–∂–∏
        pending_donations = db.query(Donation).filter(
            Donation.status == DonationStatus.PENDING,
            Donation.payment_method == PaymentMethod.TBANK,
            Donation.payment_id.is_not(None)
        ).all()
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(pending_donations)} PENDING –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        checked_count = 0
        updated_count = 0
        
        for donation in pending_donations:
            try:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º donation ID: {donation.id}, payment_id: {donation.payment_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ T-Bank API
                result = asyncio.run(check_tbank_payment_by_payment_id(donation.payment_id, db))
                
                if result and result.get("success"):
                    payment_status = result.get("status")
                    logger.info(f"üí≥ –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å: {payment_status} –¥–ª—è donation {donation.id}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω
                    if payment_status in ["CONFIRMED", "AUTHORIZED"]:
                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º donation {donation.id} –Ω–∞ COMPLETED")
                        donation.status = DonationStatus.COMPLETED
                        db.commit()
                        updated_count += 1
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∏–º–µ—Ä–∞
                        if donation.streamer_id:
                            streamer = crud.streamer.get(db, id=donation.streamer_id)
                            if streamer:
                                new_total = streamer.current_donations + donation.amount
                                crud.streamer.update(
                                    db, 
                                    db_obj=streamer, 
                                    obj_in={"current_donations": new_total}
                                )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
                        try:
                            from app.services.websocket_service import notify_new_donation
                            asyncio.run(notify_new_donation({
                                "donor_name": donation.donor_name if not donation.is_anonymous else None,
                                "amount": donation.amount,
                                "message": donation.message or "",
                                "is_anonymous": donation.is_anonymous
                            }, donation.streamer_id, db))
                        except Exception as ws_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ws_error}")
                    
                    elif payment_status in ["CANCELLED", "REVERSED", "REFUNDED"]:
                        logger.info(f"‚ùå –û–±–Ω–æ–≤–ª—è–µ–º donation {donation.id} –Ω–∞ FAILED")
                        donation.status = DonationStatus.FAILED
                        db.commit()
                        updated_count += 1
                
                checked_count += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ donation {donation.id}: {str(e)}")
                continue
        
        logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        return {
            "checked": checked_count,
            "updated": updated_count,
            "total_pending": len(pending_donations)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}")
        return {"error": str(e)}
    finally:
        db.close()

async def check_tbank_payment_by_payment_id(payment_id: str, db: Session):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ T-Bank –ø–ª–∞—Ç–µ–∂–∞ –ø–æ payment_id
    """
    import hashlib
    import httpx
    from app.core.config import settings
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ GetState
        request_data = {
            "TerminalKey": settings.TBANK_TERMINAL,
            "PaymentId": payment_id
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        token_params = {
            "PaymentId": payment_id,
            "TerminalKey": settings.TBANK_TERMINAL,
            "Password": settings.TBANK_SECRET_KEY
        }
        
        sorted_keys = sorted(token_params.keys())
        token_string = ''.join([str(token_params[key]) for key in sorted_keys])
        token = hashlib.sha256(token_string.encode('utf-8')).hexdigest()
        
        request_data['Token'] = token
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ T-Bank API
        url = "https://securepay.tinkoff.ru/v2/GetState"
        headers = {
            "Content-Type": "application/json",
            "User-Agent": "StreamCash/1.0"
        }
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(url, json=request_data, headers=headers)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("Success"):
                    return {
                        "success": True,
                        "status": result.get("Status"),
                        "payment_id": result.get("PaymentId")
                    }
            
            return {"success": False, "error": f"API returned {response.status_code}"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ T-Bank —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return {"success": False, "error": str(e)}