import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from typing import List, Optional
from jinja2 import Template

from app.core.config import settings


class EmailService:
    def __init__(self):
        self.smtp_server = settings.EMAIL_HOST
        self.smtp_port = settings.EMAIL_PORT
        self.username = settings.EMAIL_HOST_USER
        self.password = settings.EMAIL_HOST_PASSWORD
        self.use_tls = settings.EMAIL_USE_TLS

    async def send_email(
        self,
        to_emails: List[str],
        subject: str,
        html_content: str,
        text_content: Optional[str] = None,
        attachments: Optional[List[str]] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email"""
        try:
            message = MIMEMultipart("alternative")
            message["Subject"] = subject
            message["From"] = self.username
            message["To"] = ", ".join(to_emails)

            if text_content:
                text_part = MIMEText(text_content, "plain")
                message.attach(text_part)

            html_part = MIMEText(html_content, "html")
            message.attach(html_part)

            if attachments:
                for attachment_path in attachments:
                    with open(attachment_path, "rb") as attachment:
                        part = MIMEBase('application', 'octet-stream')
                        part.set_payload(attachment.read())
                        encoders.encode_base64(part)
                        part.add_header(
                            'Content-Disposition',
                            f'attachment; filename= {attachment_path.split("/")[-1]}'
                        )
                        message.attach(part)

            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                if self.use_tls:
                    server.starttls(context=context)
                if self.username and self.password:
                    server.login(self.username, self.password)
                text = message.as_string()
                server.sendmail(self.username, to_emails, text)

            print(f"Email sent successfully to: {', '.join(to_emails)}")
            return True

        except Exception as e:
            print(f"Failed to send email: {str(e)}")
            return False

    async def send_donation_notification(
        self,
        streamer_email: str,
        donor_name: str,
        amount: float,
        message: str,
        streamer_name: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–Ω–∞—Ç–µ —Å—Ç—Ä–∏–º–µ—Ä—É"""
        
        subject = f"üí∞ –ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç –æ—Ç {donor_name} - {amount}‚ÇΩ"
        
        html_template = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
                .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }
                .content { padding: 30px; }
                .donation-info { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .amount { font-size: 24px; font-weight: bold; color: #28a745; }
                .message { background: #e9ecef; padding: 15px; border-radius: 5px; margin: 15px 0; font-style: italic; }
                .footer { background: #6c757d; color: white; padding: 20px; text-align: center; font-size: 12px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üéâ –ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç!</h1>
                    <p>–ö—Ç–æ-—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∞–ª –≤–∞—à —Å—Ç—Ä–∏–º</p>
                </div>
                <div class="content">
                    <p>–ü—Ä–∏–≤–µ—Ç, {{ streamer_name }}!</p>
                    <p>–£ –≤–∞—Å –Ω–æ–≤—ã–π –¥–æ–Ω–∞—Ç:</p>
                    
                    <div class="donation-info">
                        <p><strong>–û—Ç:</strong> {{ donor_name }}</p>
                        <p><strong>–°—É–º–º–∞:</strong> <span class="amount">{{ amount }}‚ÇΩ</span></p>
                        {% if message %}
                        <div class="message">
                            <strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong><br>
                            "{{ message }}"
                        </div>
                        {% endif %}
                    </div>
                    
                    <p>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ</p>
                    
                    <p style="text-align: center; margin-top: 30px;">
                        <a href="{{ frontend_url }}/dashboard" 
                           style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
                            –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        </a>
                    </p>
                </div>
                <div class="footer">
                    <p>–°—Ç—Ä–∏–º–ö—ç—à - –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏—ë–º–∞ –¥–æ–Ω–∞—Ç–æ–≤</p>
                    <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ù–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        template = Template(html_template)
        html_content = template.render(
            streamer_name=streamer_name,
            donor_name=donor_name,
            amount=amount,
            message=message,
            frontend_url=settings.FRONTEND_URL
        )
        
        return await self.send_email(
            to_emails=[streamer_email],
            subject=subject,
            html_content=html_content
        )

    async def send_welcome_email(self, user_email: str, username: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        
        subject = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ç—Ä–∏–º–ö—ç—à, {username}!"
        
        html_template = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
                .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }
                .content { padding: 30px; }
                .feature { margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; }
                .cta-button { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0; }
                .footer { background: #6c757d; color: white; padding: 20px; text-align: center; font-size: 12px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
                    <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –°—Ç—Ä–∏–º–ö—ç—à</p>
                </div>
                <div class="content">
                    <p>–ü—Ä–∏–≤–µ—Ç, {{ username }}!</p>
                    <p>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</p>
                    
                    <div class="feature">
                        <h3>‚ö° –ü–æ–ª—É—á–∞—Ç—å –¥–æ–Ω–∞—Ç—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ</h3>
                        <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è</p>
                    </div>
                    
                    <div class="feature">
                        <h3>üé® –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–µ—Ä—Ç—ã</h3>
                        <p>–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å–≤–æ–∏ –≥–∏—Ñ–∫–∏, –∑–≤—É–∫–∏ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
                    </div>
                    
                    <div class="feature">
                        <h3>üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</h3>
                        <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–æ—Ö–æ–¥—ã –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤–∞—à–∏—Ö –∑—Ä–∏—Ç–µ–ª–µ–π</p>
                    </div>
                    
                    <p style="text-align: center;">
                        <a href="{{ frontend_url }}/dashboard" class="cta-button">
                            –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                        </a>
                    </p>
                    
                    <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!</p>
                </div>
                <div class="footer">
                    <p>–°—Ç—Ä–∏–º–ö—ç—à - –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏—ë–º–∞ –¥–æ–Ω–∞—Ç–æ–≤</p>
                    <p>–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ –ø–æ –æ—à–∏–±–∫–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ.</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        template = Template(html_template)
        html_content = template.render(
            username=username,
            frontend_url=settings.FRONTEND_URL
        )
        
        return await self.send_email(
            to_emails=[user_email],
            subject=subject,
            html_content=html_content
        )

    async def send_password_reset_email(self, user_email: str, reset_token: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
        
        subject = "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –°—Ç—Ä–∏–º–ö—ç—à"
        reset_url = f"{settings.FRONTEND_URL}/reset-password?token={reset_token}"
        
        html_template = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
                .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
                .header { background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); color: white; padding: 30px; text-align: center; }
                .content { padding: 30px; }
                .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
                .cta-button { background: #dc3545; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0; }
                .footer { background: #6c757d; color: white; padding: 20px; text-align: center; font-size: 12px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h1>
                    <p>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞</p>
                </div>
                <div class="content">
                    <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –°—Ç—Ä–∏–º–ö—ç—à.</p>
                    
                    <div class="warning">
                        <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ:</strong> –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
                    </div>
                    
                    <p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
                    
                    <p style="text-align: center;">
                        <a href="{{ reset_url }}" class="cta-button">
                            –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
                        </a>
                    </p>
                    
                    <p style="font-size: 12px; color: #6c757d;">
                        –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.<br>
                        –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:<br>
                        {{ reset_url }}
                    </p>
                </div>
                <div class="footer">
                    <p>–°—Ç—Ä–∏–º–ö—ç—à - –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏—ë–º–∞ –¥–æ–Ω–∞—Ç–æ–≤</p>
                    <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ù–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        template = Template(html_template)
        html_content = template.render(
            reset_url=reset_url
        )
        
        return await self.send_email(
            to_emails=[user_email],
            subject=subject,
            html_content=html_content
        )


email_service = EmailService()