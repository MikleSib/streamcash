from typing import Any
import httpx
import logging

from fastapi import APIRouter, Depends, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session

from app import crud
from app.core import deps
from app.core.config import settings
from app.models.donation import DonationStatus, PaymentMethod
from app.services.payment_service import PaymentService
from app.services.websocket_service import notify_new_donation
from pydantic import BaseModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()

class PaymentInitRequest(BaseModel):
    amount: float
    order_id: str
    payment_method: str
    description: str = "–î–æ–Ω–∞—Ç"
    streamer_id: int

@router.post("/init")
async def init_payment(
    request: PaymentInitRequest,
    db: Session = Depends(deps.get_db),
) -> Any:
    try:
        payment_service = PaymentService()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–ª–∞—Ç–µ–∂–∞
        payment_method = PaymentMethod.TBANK if request.payment_method == 'tbank' else PaymentMethod.TEST
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_data = await payment_service.create_payment(
            amount=request.amount,
            description=request.description,
            payment_method=payment_method
        )
        
        return {
            "success": True,
            "payment_url": payment_data["confirmation_url"],
            "payment_id": payment_data["id"]
        }
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.post("/tbank/init")
async def init_tbank_payment(
    request: PaymentInitRequest,
    db: Session = Depends(deps.get_db),
) -> Any:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ T-Bank —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–æ–∫–µ–Ω–∞
    """
    print(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ T-Bank –ø–ª–∞—Ç–µ–∂–∞: {request}")
    print(f"üîç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"   TBANK_TERMINAL: {settings.TBANK_TERMINAL}")
    print(f"   TBANK_SECRET_KEY: {settings.TBANK_SECRET_KEY}")
    print(f"   TBANK_PASSWORD: {settings.TBANK_PASSWORD}")
    
    try:
        import hashlib
        import time
        import uuid
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not request.amount or request.amount <= 0:
            raise HTTPException(status_code=400, detail="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if not settings.TBANK_TERMINAL:
            raise HTTPException(status_code=400, detail="T-Bank terminal –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not settings.TBANK_SECRET_KEY:
            raise HTTPException(status_code=400, detail="T-Bank secret key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        order_id = request.order_id or f"order_{int(time.time() * 1000)}_{uuid.uuid4().hex[:8]}"
        
        print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ T-Bank: Terminal={settings.TBANK_TERMINAL}, SecretKey={settings.TBANK_SECRET_KEY}")
        print(f"üîß –î–ª–∏–Ω–∞ SecretKey: {len(settings.TBANK_SECRET_KEY) if settings.TBANK_SECRET_KEY else 0}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        payment_data = {
            "TerminalKey": settings.TBANK_TERMINAL,
            "Amount": int(request.amount * 100),  # T-Bank –æ–∂–∏–¥–∞–µ—Ç —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            "OrderId": order_id,
            "Description": request.description,
            "Language": "ru",
            "NotificationURL": f"{settings.API_URL}/api/v1/payments/webhook/tbank",
            "SuccessURL": f"{settings.FRONTEND_URL}/donate/success?orderId={order_id}&amount={request.amount}",
            "FailURL": f"{settings.FRONTEND_URL}/donate/failed?orderId={order_id}&amount={request.amount}"
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ T-Bank
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ)
        token_params = {
            "Amount": payment_data['Amount'],
            "Description": payment_data['Description'], 
            "FailURL": payment_data['FailURL'],
            "Language": payment_data['Language'],
            "NotificationURL": payment_data['NotificationURL'],
            "OrderId": payment_data['OrderId'],
            "SuccessURL": payment_data['SuccessURL'],
            "TerminalKey": payment_data['TerminalKey']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º Password (—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
        token_params["Password"] = settings.TBANK_SECRET_KEY
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–ø–æ –∫–ª—é—á–∞–º)
        sorted_keys = sorted(token_params.keys())
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("üîç –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞:")
        for key in sorted_keys:
            value = str(token_params[key])
            print(f"   {key}: {value}")
        
        # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–ª—é—á–µ–π
        token_string = ''.join([str(token_params[key]) for key in sorted_keys])
        print(f"üîë –°—Ç—Ä–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {token_string}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SHA-256 —Ö—ç—à
        token = hashlib.sha256(token_string.encode('utf-8')).hexdigest()
        print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
        
        # –£–¥–∞–ª—è–µ–º Password –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ (–æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ API)
        payment_data['Token'] = token
        
        print(f"T-Bank payment data: {payment_data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ T-Bank API (–±–æ–µ–≤–∞—è —Å—Ä–µ–¥–∞)
        url = "https://securepay.tinkoff.ru/v2/Init"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        headers = {
            "Content-Type": "application/json",
            "User-Agent": "StreamCash/1.0"
        }
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            print(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ URL: {url}")
            print(f"üì§ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {payment_data}")
            print(f"üì§ –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞
            try:
                test_response = await client.get("https://securepay.tinkoff.ru/", timeout=10.0)
                print(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ö–æ—Å—Ç—É: —Å—Ç–∞—Ç—É—Å {test_response.status_code}")
            except Exception as e:
                print(f"‚ùå –•–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                # –°–ø–æ—Å–æ–± 1: JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
                response = await client.post(url, json=payment_data, headers=headers)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ JSON: {e}")
                # –°–ø–æ—Å–æ–± 2: –î–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ JSON
                import json
                headers["Content-Type"] = "application/json"
                response = await client.post(url, data=json.dumps(payment_data), headers=headers)
            
            print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            print(f"üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
            print(f"üì• –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            
            if response.status_code != 200:
                raise HTTPException(status_code=400, detail=f"T-Bank API returned status {response.status_code}: {response.text}")
            
            try:
                result = response.json()
                print(f"T-Bank API response: {result}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"‚ùå –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
                raise HTTPException(status_code=400, detail=f"Invalid JSON response from T-Bank: {response.text}")
            
            if result.get("Success"):
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–æ–Ω–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                payment_id = result.get("PaymentId", order_id)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–æ–Ω–∞—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                from app.schemas.donation import DonationCreate
                
                # –ù–∞–π–¥–µ–º streamer –ø–æ ID, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å recipient_id (user_id)
                streamer = crud.streamer.get(db, id=request.streamer_id)
                if not streamer:
                    raise HTTPException(status_code=404, detail="Streamer not found")
                
                donation_create = DonationCreate(
                    amount=request.amount,
                    donor_name="–ê–Ω–æ–Ω–∏–º",  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                    message="",
                    is_anonymous=True,
                    recipient_id=streamer.user_id,
                    payment_method=PaymentMethod.TBANK
                )
                
                print(f"üíæ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–æ–Ω–∞—Ç–∞: {donation_create}")
                donation = crud.donation.create(db, obj_in=donation_create)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–Ω–∞—Ç —Å payment_id –∏ —Å—Ç–∞—Ç—É—Å–æ–º
                donation = crud.donation.update(
                    db, 
                    db_obj=donation, 
                    obj_in={
                        "payment_id": payment_id,
                        "status": DonationStatus.PENDING
                    }
                )
                print(f"‚úÖ –î–æ–Ω–∞—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {donation.id}")
                
                return {
                    "success": True,
                    "payment_id": payment_id,
                    "payment_url": result.get("PaymentURL"),
                    "order_id": order_id,
                    "amount": request.amount,
                    "donation_id": donation.id,
                    "token": token
                }
            else:
                error_msg = f"T-Bank payment creation failed: {result}"
                print(error_msg)
                raise HTTPException(status_code=400, detail=error_msg)
                
    except Exception as e:
        print(f"T-Bank API error: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))

@router.options("/webhook/test")
async def test_webhook_options():
    return {"status": "ok"}

@router.post("/webhook/yookassa")
async def yookassa_webhook(
    request: Request,
    db: Session = Depends(deps.get_db),
) -> Any:
    payload = await request.json()
    payment_service = PaymentService()
    
    if payload.get("event") == "payment.succeeded":
        payment_id = payload["object"]["id"]
        donation = crud.donation.get_by_payment_id(db, payment_id=payment_id)
        
        if donation:
            donation = crud.donation.update(
                db, 
                db_obj=donation, 
                obj_in={"status": DonationStatus.COMPLETED}
            )
            
            streamer = crud.streamer.get(db, id=donation.streamer_id)
            if streamer:
                new_total = streamer.current_donations + donation.amount
                crud.streamer.update(
                    db, 
                    db_obj=streamer, 
                    obj_in={"current_donations": new_total}
                )
                
                await notify_new_donation({
                    "donor_name": donation.donor_name if not donation.is_anonymous else None,
                    "amount": donation.amount,
                    "message": donation.message or "",
                    "is_anonymous": donation.is_anonymous
                }, streamer.id, db)
    
    return {"status": "ok"}

@router.post("/webhook/tinkoff")
async def tinkoff_webhook(
    request: Request,
    db: Session = Depends(deps.get_db),
) -> Any:
    payload = await request.json()
    
    if payload.get("Status") == "CONFIRMED":
        payment_id = payload["PaymentId"]
        donation = crud.donation.get_by_payment_id(db, payment_id=payment_id)
        
        if donation:
            donation = crud.donation.update(
                db, 
                db_obj=donation, 
                obj_in={"status": DonationStatus.COMPLETED}
            )
            
            streamer = crud.streamer.get(db, id=donation.streamer_id)
            if streamer:
                new_total = streamer.current_donations + donation.amount
                crud.streamer.update(
                    db, 
                    db_obj=streamer, 
                    obj_in={"current_donations": new_total}
                )
                
                await notify_new_donation({
                    "donor_name": donation.donor_name if not donation.is_anonymous else None,
                    "amount": donation.amount,
                    "message": donation.message or "",
                    "is_anonymous": donation.is_anonymous
                }, streamer.id, db)
    
        return {"status": "ok"}

@router.api_route("/webhook/tbank", methods=["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"])
async def tbank_webhook(
    request: Request,
    db: Session = Depends(deps.get_db),
) -> Any:
    print(f"üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ T-Bank webhook!")
    print(f"üìç URL: {request.url}")
    print(f"üìç Method: {request.method}")
    print(f"üìç Headers: {dict(request.headers)}")
    print(f"üìç Client: {request.client}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ GET –∑–∞–ø—Ä–æ—Å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
    if request.method == "GET":
        print("‚úÖ GET –∑–∞–ø—Ä–æ—Å –Ω–∞ webhook - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å OK")
        return {"status": "ok", "message": "T-Bank webhook endpoint is accessible", "method": "GET"}
    
    # –ï—Å–ª–∏ —ç—Ç–æ OPTIONS –∑–∞–ø—Ä–æ—Å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if request.method == "OPTIONS":
        print("‚úÖ OPTIONS –∑–∞–ø—Ä–æ—Å –Ω–∞ webhook - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏")
        return {"status": "ok", "message": "CORS preflight", "method": "OPTIONS"}
    
    try:
        payload = await request.json()
        print(f"üì© T-Bank webhook payload: {payload}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        body = await request.body()
        print(f"üì© Raw body: {body}")
        return {"status": "error", "message": "Invalid JSON"}
    
    # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¢-–±–∞–Ω–∫–∞, —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–æ–ª–µ Status
    status = payload.get("Status")
    payment_id = payload.get("PaymentId")
    order_id = payload.get("OrderId")
    
    print(f"üìä –°—Ç–∞—Ç—É—Å: {status}, PaymentId: {payment_id}, OrderId: {order_id}")
    
    if not payment_id:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PaymentId –≤ webhook")
        return {"status": "error", "message": "No PaymentId provided"}
    
    donation = crud.donation.get_by_payment_id(db, payment_id=payment_id)
    if not donation:
        print(f"‚ùå –î–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è payment_id: {payment_id}")
        print(f"üîç –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ order_id: {order_id}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ order_id –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        if order_id:
            all_donations = crud.donation.get_multi(db)
            print(f"üîç –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(all_donations)}")
            for d in all_donations:
                print(f"   –î–æ–Ω–∞—Ç ID: {d.id}, payment_id: {d.payment_id}")
        return {"status": "error", "message": f"Donation not found for payment_id: {payment_id}"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    notification_token = payload.get("Token")
    if notification_token:
        print(f"üîê –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_token}")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ T-Bank
    
    # –°—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¢-–±–∞–Ω–∫–∞
    # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å NEW
    if status in ["CONFIRMED", "NEW"]:
        print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
        donation = crud.donation.update(
            db, 
            db_obj=donation, 
            obj_in={"status": DonationStatus.COMPLETED}
        )
        
        streamer = crud.streamer.get(db, id=donation.streamer_id)
        if streamer:
            new_total = streamer.current_donations + donation.amount
            crud.streamer.update(
                db, 
                db_obj=streamer, 
                obj_in={"current_donations": new_total}
            )
            
            print(f"Sending notification for donation: {donation.id} to streamer: {streamer.id}")
            await notify_new_donation({
                "donor_name": donation.donor_name if not donation.is_anonymous else None,
                "amount": donation.amount,
                "message": donation.message or "",
                "is_anonymous": donation.is_anonymous
            }, streamer.id, db)
            
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    elif status in ["CANCELLED", "REVERSED", "REFUNDED", "PARTIAL_REFUNDED"]:
        print(f"‚ùå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
        donation = crud.donation.update(
            db, 
            db_obj=donation, 
            obj_in={"status": DonationStatus.FAILED}
        )
    
    else:
        print(f"‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å {status}, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–Ω–∞—Ç")
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ T-Bank
    print(f"‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK")
    return {"OK": True}

@router.post("/webhook/test")
async def test_webhook(
    request: Request,
    db: Session = Depends(deps.get_db),
) -> Any:
    print(f"Test webhook called with request: {request}")
    payload = await request.json()
    print(f"Test webhook payload: {payload}")
    
    if payload.get("status") == "succeeded":
        payment_id = payload["payment_id"]
        donation = crud.donation.get_by_payment_id(db, payment_id=payment_id)
        
        if donation:
            donation = crud.donation.update(
                db, 
                db_obj=donation, 
                obj_in={"status": DonationStatus.COMPLETED}
            )
            
            streamer = crud.streamer.get(db, id=donation.streamer_id)
            if streamer:
                new_total = streamer.current_donations + donation.amount
                crud.streamer.update(
                    db, 
                    db_obj=streamer, 
                    obj_in={"current_donations": new_total}
                )
                
                await notify_new_donation({
                    "donor_name": donation.donor_name if not donation.is_anonymous else None,
                    "amount": donation.amount,
                    "message": donation.message or "",
                    "is_anonymous": donation.is_anonymous
                }, streamer.id, db)
    
    return {"status": "ok"}

@router.get("/status/{payment_id}")
async def check_payment_status(
    payment_id: str,
    db: Session = Depends(deps.get_db),
) -> Any:
    donation = crud.donation.get_by_payment_id(db, payment_id=payment_id)
    if not donation:
        raise HTTPException(status_code=404, detail="Payment not found")

    payment_service = PaymentService()
    status = await payment_service.check_payment_status(payment_id)

    return {
        "payment_id": payment_id,
        "status": status,
        "donation_id": donation.id
    } 