import asyncio
import logging
import sys
import os
import json
from contextlib import asynccontextmanager

sys.path.append('/app/shared')
sys.path.append('/app')

from shared.rabbitmq import RabbitMQClient
from shared.events import EventType
from shared.database import SessionLocal
from app import crud
from app.services.websocket_service import notify_new_donation

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

RABBITMQ_URL = os.getenv("RABBITMQ_URL", "amqp://guest:guest@rabbitmq:5672/")

class NotificationsService:
    def __init__(self):
        self.rabbitmq_client = RabbitMQClient(RABBITMQ_URL)
        self.running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        await self.rabbitmq_client.connect()
        
        # –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–∏
        await self.rabbitmq_client.declare_queue("notifications.events")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        await self.rabbitmq_client.consume_messages(
            "notifications.events",
            self.handle_event
        )
        
        self.running = True
        logger.info("üîî Notifications Service –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.running = False
        await self.rabbitmq_client.disconnect()
        logger.info("üëã Notifications Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def handle_event(self, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
        event_type = event_data.get("event_type")
        data = event_data.get("data", {})
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
        
        try:
            if event_type == EventType.NOTIFICATION_SEND:
                await self.handle_notification_send(data)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
    
    async def handle_notification_send(self, data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–µ—Ä—É"""
        db = SessionLocal()
        try:
            streamer_id = data.get("streamer_id")
            notification_type = data.get("notification_type")
            notification_data = data.get("data", {})
            
            if notification_type == "donation":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–Ω–∞—Ç–µ
                await notify_new_donation(notification_data, streamer_id, db)
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä—É {streamer_id}")
                
                # –ü–æ–º–µ—á–∞–µ–º –¥–æ–Ω–∞—Ç –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π (–µ—Å–ª–∏ –µ—Å—Ç—å donation_id)
                donation_id = data.get("donation_id")
                if donation_id:
                    donation = crud.donation.get(db, id=donation_id)
                    if donation:
                        crud.donation.update(
                            db, 
                            db_obj=donation, 
                            obj_in={"is_alert_shown": True}
                        )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        finally:
            db.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    service = NotificationsService()
    
    try:
        await service.start()
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        while service.running:
            await asyncio.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await service.stop()

if __name__ == "__main__":
    asyncio.run(main())