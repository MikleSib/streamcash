#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ PENDING –ø–ª–∞—Ç–µ–∂–µ–π
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ü–∏–∫–ª–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
"""

import asyncio
import time
import logging
import hashlib
import httpx
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import sys
import os
sys.path.append('/app')

from app.core.config import settings
from app.core.database import SessionLocal
from app.models.donation import DonationStatus, PaymentMethod, Donation
from app import crud

async def check_tbank_payment_status(payment_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ T-Bank"""
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ GetState
        request_data = {
            "TerminalKey": settings.TBANK_TERMINAL,
            "PaymentId": payment_id
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        token_params = {
            "PaymentId": payment_id,
            "TerminalKey": settings.TBANK_TERMINAL,
            "Password": settings.TBANK_SECRET_KEY
        }
        
        sorted_keys = sorted(token_params.keys())
        token_string = ''.join([str(token_params[key]) for key in sorted_keys])
        token = hashlib.sha256(token_string.encode('utf-8')).hexdigest()
        
        request_data['Token'] = token
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ T-Bank API
        url = "https://securepay.tinkoff.ru/v2/GetState"
        headers = {
            "Content-Type": "application/json",
            "User-Agent": "StreamCash/1.0"
        }
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(url, json=request_data, headers=headers)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("Success"):
                    return {
                        "success": True,
                        "status": result.get("Status"),
                        "payment_id": result.get("PaymentId")
                    }
            
            logger.error(f"T-Bank API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
            return {"success": False, "error": f"API returned {response.status_code}"}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ T-Bank —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è payment_id {payment_id}: {str(e)}")
        return {"success": False, "error": str(e)}

async def process_pending_payments():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö PENDING –ø–ª–∞—Ç–µ–∂–µ–π"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PENDING –ø–ª–∞—Ç–µ–∂–∏ T-Bank
        pending_donations = db.query(Donation).filter(
            Donation.status == DonationStatus.PENDING,
            Donation.payment_method == PaymentMethod.TBANK,
            Donation.payment_id.is_not(None)
        ).all()
        
        if not pending_donations:
            logger.info("üìä PENDING –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 0
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(pending_donations)} PENDING –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        updated_count = 0
        
        for donation in pending_donations:
            try:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º donation ID: {donation.id}, payment_id: {donation.payment_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ T-Bank API
                result = await check_tbank_payment_status(donation.payment_id)
                
                if result and result.get("success"):
                    payment_status = result.get("status")
                    logger.info(f"üí≥ –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å: {payment_status} –¥–ª—è donation {donation.id}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω
                    if payment_status in ["CONFIRMED", "AUTHORIZED"]:
                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º donation {donation.id} –Ω–∞ COMPLETED")
                        donation.status = DonationStatus.COMPLETED
                        db.commit()
                        updated_count += 1
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∏–º–µ—Ä–∞
                        if donation.streamer_id:
                            streamer = crud.streamer.get(db, id=donation.streamer_id)
                            if streamer:
                                new_total = streamer.current_donations + donation.amount
                                crud.streamer.update(
                                    db, 
                                    db_obj=streamer, 
                                    obj_in={"current_donations": new_total}
                                )
                                logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.id}: +{donation.amount} —Ä—É–±")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        try:
                            from app.services.websocket_service import notify_new_donation
                            await notify_new_donation({
                                "donor_name": donation.donor_name if not donation.is_anonymous else None,
                                "amount": donation.amount,
                                "message": donation.message or "",
                                "is_anonymous": donation.is_anonymous
                            }, donation.streamer_id, db)
                            logger.info(f"üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è donation {donation.id}")
                        except Exception as ws_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ws_error}")
                    
                    elif payment_status in ["CANCELLED", "REVERSED", "REFUNDED"]:
                        logger.info(f"‚ùå –û–±–Ω–æ–≤–ª—è–µ–º donation {donation.id} –Ω–∞ FAILED")
                        donation.status = DonationStatus.FAILED
                        db.commit()
                        updated_count += 1
                    
                    else:
                        logger.info(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å {payment_status} –¥–ª—è donation {donation.id} - –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º PENDING")
                
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å donation {donation.id}: {result.get('error')}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ donation {donation.id}: {str(e)}")
                continue
        
        if updated_count > 0:
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} –∏–∑ {len(pending_donations)}")
        else:
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ {len(pending_donations)} –ø–ª–∞—Ç–µ–∂–µ–π –æ—Å—Ç–∞–ª–∏—Å—å –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING")
        
        return updated_count
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}")
        return 0
    finally:
        db.close()

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from sqlalchemy import text
        db = SessionLocal()
        db.execute(text("SELECT 1"))
        db.close()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False

def check_settings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ T-Bank"""
    missing = []
    if not settings.TBANK_TERMINAL:
        missing.append("TBANK_TERMINAL")
    if not settings.TBANK_SECRET_KEY:
        missing.append("TBANK_SECRET_KEY")
    
    if missing:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(missing)}")
        return False
    
    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ T-Bank –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    return True

async def main():
    """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π T-Bank")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not check_settings():
        logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")
        return
    
    # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    while not check_database_connection():
        logger.info("‚è≥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
    
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥...")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        try:
            start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
            updated = await process_pending_payments()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = time.time() - start_time
            logger.info(f"‚è±Ô∏è –¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f} —Å–µ–∫. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫.")
            
            # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(10)
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            break
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
            logger.info("‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º...")
            await asyncio.sleep(10)
    
    logger.info("üëã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())